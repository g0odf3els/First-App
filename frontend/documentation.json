{
    "pipes": [
        {
            "name": "PriorityPipe",
            "id": "pipe-PriorityPipe-7ef6224ee231dc98caa0a45e085d68cf17c48d9098facabbb6456714d31eb1f7d45c49f28734caaafeaf1192a8a7525f15076d8975528dac99788ead42835bcd",
            "file": "src/app/pipes/priority.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "priority",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Priority } from '../data/enums/priority';\r\n\r\n@Pipe({\r\n    name: 'priority',\r\n    standalone: true,\r\n})\r\nexport class PriorityPipe implements PipeTransform {\r\n    transform(value: number): string {\r\n        return Priority[value];\r\n    }\r\n}"
        }
    ],
    "interfaces": [
        {
            "name": "ActionLog",
            "id": "interface-ActionLog-56438ffcbb77a235ab31a2f8fb2c2dd143846db9de2d659bacae530c702b61ad4d3951b8e23f45427590d10af94b053c6fb26bb8719e904da2ad8ec3f0686cb0",
            "file": "src/app/data/models/action-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionType } from \"../enums/actionType\";\r\nimport { PropertyLog } from \"./property-log\";\r\n\r\nexport interface ActionLog {\r\n    id: string,\r\n    boardId: string,\r\n    entityId: string,\r\n    entityName: string,\r\n    entityType: string,\r\n    action: ActionType,\r\n    creationTime: Date,\r\n    affectedProperties: PropertyLog[]\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionType",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "affectedProperties",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PropertyLog[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "creationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "entityName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "entityType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Board",
            "id": "interface-Board-b7ad16d37d0ce602d05be1d087336adc0ada52a12a0967b649e5ba456e24469dc52b18c16e7794990dd62f680c5ec5f0a9dc41b96b5ce9fe051b5813bf03594f",
            "file": "src/app/data/models/board.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Board {\r\n    id: string,\r\n    name: string,\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardState",
            "id": "interface-BoardState-f4a19308b2e45529d6364e116ea26b2dbc305b67e8ac3be38b5ad515134dd266d2872a3c2b5edb58d130944e57ebdae47855fb05d51146c71ed640bff322e029",
            "file": "src/app/store/board/board.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\nimport { Board } from '../../data/models/board';\r\n\r\nexport interface BoardState extends EntityState<Board> {\r\n    selectedBoardId: string | null;\r\n    loading: boolean;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Board> = createEntityAdapter<Board>();\r\n\r\nexport const initialState: BoardState = adapter.getInitialState({\r\n    selectedBoardId: null,\r\n    loading: false,\r\n});",
            "properties": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedBoardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "EntityState"
            ]
        },
        {
            "name": "Card",
            "id": "interface-Card-573ddc7dcf66fecfb22b12bc7427ce62de6bda9e7d0a52ce6b5e2169d3b3f08c5dc6bafaf02ccfb0b1da02399698acdcc5a69e76a35f26e95ddb65f59e3b8eae",
            "file": "src/app/data/models/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Priority } from \"../enums/priority\";\r\n\r\nexport interface Card {\r\n    id: string,\r\n    boardId: string,\r\n    listId: string,\r\n    name: string,\r\n    description: string,\r\n    dueDate: Date,\r\n    priority: Priority\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardList",
            "id": "interface-CardList-2932d831b0f64910a08dd18d3e09423cffa8e70df4d977dc398c9cace323bf35741b2fc6774300b9d890eacd61a1f7c2e296c81d128ff9547d668691a73d6311",
            "file": "src/app/data/models/card-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Card } from \"./card\";\r\n\r\nexport interface CardList {\r\n    id: string,\r\n    boardId: string,\r\n    name: string,\r\n    items: Card[],\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PropertyLog",
            "id": "interface-PropertyLog-17f19e8cd326232e037c7f6b8f2c00e857f3c72a43497fe59ccc3510a79f81c8fa20f8675c6161c2b5b5ba3c18b3c83a81b161b76634fd2e89344d24ed4286bc",
            "file": "src/app/data/models/property-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PropertyLog {\r\n    actionLogId: string,\r\n    propertyName: string,\r\n    oldValue?: string,\r\n    newValue?: string,\r\n}",
            "properties": [
                {
                    "name": "actionLogId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "newValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "oldValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "propertyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ActionLogService",
            "id": "injectable-ActionLogService-28318ef245c0e2171ce59aaeaedf4ee372129df13a193fa2ca3db79bae787a164df0b5827f40c15ed75d821bb771da15269a402c2b0981dd375a18a83aad6ab0",
            "file": "src/app/services/action-log.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loadBoardActionLogPaged",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActionLog[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCardActionLogPaged",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActionLog[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment.development';\r\nimport { ActionLog } from '../data/models/action-log';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport enum ApiPaths {\r\n  actionLogBoard = 'actionLogs/board',\r\n  actionLogCard = 'actionLogs/card'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActionLogService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private baseUrl = environment.baseUrl;\r\n\r\n  loadBoardActionLogPaged(boardId: string, page: number, pageSize: number): Observable<ActionLog[]> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    return this.http.get<ActionLog[]>(`${this.baseUrl}/${ApiPaths.actionLogBoard}/${boardId}`, { params });\r\n  }\r\n\r\n  loadCardActionLogPaged(cardId: string, page: number, pageSize: number): Observable<ActionLog[]> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    return this.http.get<ActionLog[]>(`${this.baseUrl}/${ApiPaths.actionLogCard}/${cardId}`, { params });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardEffects",
            "id": "injectable-BoardEffects-d5444e31f71399f222ffa472c564a0e78fc1c9537b72dd56505d471cf9d91940620913f4e23219567c6253f0712872fb76ceece5bbac65e977d914e42c01a710",
            "file": "src/app/store/board/board.effects.ts",
            "properties": [
                {
                    "name": "createBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.createBoard),\r\n            mergeMap(action =>\r\n                this.boardService.createBoard(action.board).pipe(\r\n                    map(board => BoardActions.createBoardSuccess({ board })),\r\n                    catchError(error => of(BoardActions.createBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "deleteBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.deleteBoard),\r\n            mergeMap(action =>\r\n                this.boardService.deleteBoard(action.boardId).pipe(\r\n                    map(() => BoardActions.deleteBoardSuccess({ boardId: action.boardId })),\r\n                    catchError(error => of(BoardActions.deleteBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loadBoards$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoards),\r\n            mergeMap(() =>\r\n                this.boardService.loadBoards().pipe(\r\n                    map(boards => BoardActions.loadBoardsSuccess({ boards })),\r\n                    catchError(error => of(BoardActions.loadBoardsFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updateBoard$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateBoard),\r\n            mergeMap(action =>\r\n                this.boardService.updateBoard(action.board).pipe(\r\n                    map(() => BoardActions.updateBoardSuccess({ board: action.board })),\r\n                    catchError(error => of(BoardActions.updateBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, mergeMap, of } from 'rxjs';\r\nimport * as BoardActions from './board.actions';\r\nimport { BoardService } from '../../services/board.service';\r\n\r\n@Injectable()\r\nexport class BoardEffects {\r\n\r\n    constructor(private actions$: Actions, private boardService: BoardService) { }\r\n\r\n    loadBoards$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.loadBoards),\r\n            mergeMap(() =>\r\n                this.boardService.loadBoards().pipe(\r\n                    map(boards => BoardActions.loadBoardsSuccess({ boards })),\r\n                    catchError(error => of(BoardActions.loadBoardsFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    createBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.createBoard),\r\n            mergeMap(action =>\r\n                this.boardService.createBoard(action.board).pipe(\r\n                    map(board => BoardActions.createBoardSuccess({ board })),\r\n                    catchError(error => of(BoardActions.createBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    updateBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.updateBoard),\r\n            mergeMap(action =>\r\n                this.boardService.updateBoard(action.board).pipe(\r\n                    map(() => BoardActions.updateBoardSuccess({ board: action.board })),\r\n                    catchError(error => of(BoardActions.updateBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    deleteBoard$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(BoardActions.deleteBoard),\r\n            mergeMap(action =>\r\n                this.boardService.deleteBoard(action.boardId).pipe(\r\n                    map(() => BoardActions.deleteBoardSuccess({ boardId: action.boardId })),\r\n                    catchError(error => of(BoardActions.deleteBoardFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardService",
            "id": "injectable-BoardService-15da785b797a275be8e7c1eaed763add8c2f3013485a80e23b672f80eeba003923889dfa720f936314801174352630a9602c7cef3193e0b228ecc6481d75245c",
            "file": "src/app/services/board.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Board>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment.development';\r\nimport { Board } from '../data/models/board';\r\n\r\nexport enum ApiPaths {\r\n  boards = 'boards',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardService {\r\n\r\n  private baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  loadBoards(): Observable<Board[]> {\r\n    return this.http.get<Board[]>(`${this.baseUrl}/${ApiPaths.boards}`);\r\n  }\r\n\r\n  createBoard(board: Board): Observable<Board> {\r\n    return this.http.post<Board>(`${this.baseUrl}/${ApiPaths.boards}`, board);\r\n  }\r\n\r\n  updateBoard(board: Board): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/${ApiPaths.boards}/${board.id}`, board);\r\n  }\r\n\r\n  deleteBoard(boardId: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${ApiPaths.boards}/${boardId}`);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardListService",
            "id": "injectable-CardListService-53d6e740814c93428cfbd098bddc9570f0780aba59990c7031d6dce1f9d47e46a596122e94aae798875c4f8d16e36bd3c6229cb5db1bd73f213d0fd4b40bf593",
            "file": "src/app/services/card-list.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardLists$",
                    "defaultValue": "this.cardListsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardListsSubject",
                    "defaultValue": "new BehaviorSubject<CardList[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<CardList[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCardList",
                    "args": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCardList",
                    "args": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCardListsPaged",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCardList",
                    "args": [
                        {
                            "name": "cardLists",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardLists",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CardList } from '../data/models/card-list';\r\nimport { environment } from '../../environments/environment.development';\r\n\r\nexport enum ApiPaths {\r\n  cardLists = 'cardLists',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CardListService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private baseUrl = environment.baseUrl;\r\n\r\n  public cardListsSubject: BehaviorSubject<CardList[]> = new BehaviorSubject<CardList[]>([]);\r\n  public cardLists$ = this.cardListsSubject.asObservable();\r\n\r\n  loadCardListsPaged(boardId: string, page: number, pageSize: number) {\r\n    const params = new HttpParams()\r\n      .set('boardId', boardId)\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    this.http.get<CardList[]>(`${this.baseUrl}/${ApiPaths.cardLists}`, { params }).subscribe(\r\n      {\r\n        next: (data) => {\r\n          this.cardListsSubject.next(data);\r\n        },\r\n        error: (error) => {\r\n          console.log(error);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  createCardList(cardList: CardList) {\r\n    this.http.post<CardList>(`${this.baseUrl}/${ApiPaths.cardLists}`,\r\n      {\r\n        boardId: cardList.boardId,\r\n        name: cardList.name\r\n      }).subscribe(\r\n        {\r\n          next: (data) => {\r\n            const updatedCardLists = [...this.cardListsSubject.getValue(), data];\r\n            this.cardListsSubject.next(updatedCardLists);\r\n          },\r\n          error: (error) => {\r\n            console.log(error);\r\n          }\r\n        });\r\n  }\r\n\r\n  updateCardList(cardLists: CardList) {\r\n    this.http.patch<void>(`${this.baseUrl}/${ApiPaths.cardLists}/${cardLists.id}`, { \"name\": cardLists.name }).subscribe(\r\n      {\r\n        next: () => {\r\n          const updatedCardLists = this.cardListsSubject.value.map(item => {\r\n            if (item.id === cardLists.id) {\r\n              return { ...item, name: cardLists.name };\r\n            }\r\n            return item;\r\n          });\r\n          this.cardListsSubject.next(updatedCardLists);\r\n        },\r\n        error: (error) => {\r\n          console.log(error);\r\n        }\r\n      });\r\n  }\r\n\r\n  deleteCardList(cardList: CardList) {\r\n    return this.http.delete<void>(`${this.baseUrl}/${ApiPaths.cardLists}/${cardList.id}`).subscribe(\r\n      {\r\n        next: () => {\r\n          const updatedCardLists = this.cardListsSubject.value.filter(item => item.id !== cardList.id);\r\n          this.cardListsSubject.next(updatedCardLists);\r\n        },\r\n        error: (error) => {\r\n          console.log(error);\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardService",
            "id": "injectable-CardService-797070357d09f919773ce9666b5aeb044396f61009ffc031afb2f5a17fef5d48fe8f163760b8c3e8d5285479ba9153ea467812b1a82106d87b88a654eaf74c62",
            "file": "src/app/services/card.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Card>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Card>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment.development';\r\nimport { Card } from '../data/models/card';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport enum ApiPaths {\r\n  cards = 'cards',\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CardService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private baseUrl = environment.baseUrl;\r\n\r\n  createCard(card: Card): Observable<Card> {\r\n    return this.http.post<Card>(`${this.baseUrl}/${ApiPaths.cards}`, {\r\n      \"boardId\": card.boardId,\r\n      \"cardListId\": card.listId,\r\n      \"name\": card.name,\r\n      \"description\": card.description,\r\n      \"dueTime\": card.dueDate,\r\n      \"priority\": card.priority\r\n    });\r\n  }\r\n\r\n  updateCard(card: Card): Observable<Card> {\r\n    return this.http.patch<Card>(`${this.baseUrl}/${ApiPaths.cards}/${card.id}`, {\r\n      \"cardListId\": card.listId,\r\n      \"name\": card.name,\r\n      \"description\": card.description,\r\n      \"dueTime\": card.dueDate,\r\n      \"priority\": card.priority\r\n    });\r\n  }\r\n\r\n  deleteCard(card: Card): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${ApiPaths.cards}/${card.id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "mockActionLogService",
            "id": "class-mockActionLogService-a5778e17fc589e4357f4d0cefba3deb8470451bb6ec9346abf9fec654130f4efaba20c39179973009a883cc0f0f453c2aedcc667f9d9171379e4a5754f99676f",
            "file": "src/stories/mock-services/mockActionLogService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, of } from \"rxjs\";\r\nimport { ActionLog } from \"../../app/data/models/action-log\";\r\n\r\nexport class mockActionLogService {\r\n\r\n    loadBoardActionLogPaged(boardId: string, page: number, pageSize: number): Observable<ActionLog[]> {\r\n        const actionLogs: ActionLog[] = [\r\n            {\r\n                \"id\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"f94eba62-f589-42e1-ac3a-c966d4c69172\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:55:25.668374\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:55:25 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Low\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"f94eba62-f589-42e1-ac3a-c966d4c69172\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:55:12 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"e1389304-466b-4931-ae9a-94df7c21b049\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"To Do\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. \"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"8dd14ff9-bb3b-490a-94f8-0567dc6b668d\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:55:11.798548\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"There are many variations of passages of Lorem Ipsum available\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"8dd14ff9-bb3b-490a-94f8-0567dc6b668d\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:55:11 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Medium\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"In Process\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:55 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"522ed085-ce00-4c74-91dc-50f9aea7f9c5\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"347435bc-f00b-4715-ae04-b710ac4085cf\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:54:54.866896\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/24/2024 9:00:00 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"347435bc-f00b-4715-ae04-b710ac4085cf\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \" is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here',\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Medium\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Miscellaneous\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:54 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"e48370d5-e422-4ca5-8dbd-cf4ee1f7f42a\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5405d8df-6c37-43a6-85c4-671dbc1b1236\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"bd96bfdb-6799-4f95-b243-8963f66cb22b\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:54:42.173836\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/17/2024 9:00:00 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Low\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"bd96bfdb-6799-4f95-b243-8963f66cb22b\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:42 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"In Process\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"f2b33c91-167f-4a05-9a19-2db405d8e5c7\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"e84e8f4b-1ca0-4c55-80c1-8c68e72d5b23\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:54:32.688357\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"e1389304-466b-4931-ae9a-94df7c21b049\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:32 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:16 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"To Do\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"High\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"9e85843e-27c8-486c-90a9-6dfb96631983\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"e84e8f4b-1ca0-4c55-80c1-8c68e72d5b23\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"6dd55e23-4762-467a-8f3e-6981c73b5502\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"5405d8df-6c37-43a6-85c4-671dbc1b1236\",\r\n                \"entityName\": \"Miscellaneous\",\r\n                \"entityType\": \"CardList\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:54:15.512327\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"6dd55e23-4762-467a-8f3e-6981c73b5502\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"6dd55e23-4762-467a-8f3e-6981c73b5502\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Miscellaneous\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"6dd55e23-4762-467a-8f3e-6981c73b5502\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:15 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"6dd55e23-4762-467a-8f3e-6981c73b5502\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5405d8df-6c37-43a6-85c4-671dbc1b1236\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"52aa80a5-4c03-497c-8c84-146e819fe0cc\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\",\r\n                \"entityName\": \"In Process\",\r\n                \"entityType\": \"CardList\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:54:03.860028\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"52aa80a5-4c03-497c-8c84-146e819fe0cc\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"52aa80a5-4c03-497c-8c84-146e819fe0cc\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:54:03 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"52aa80a5-4c03-497c-8c84-146e819fe0cc\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"In Process\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"52aa80a5-4c03-497c-8c84-146e819fe0cc\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"956493b3-a488-46f1-806f-3ce4779d5718\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"e1389304-466b-4931-ae9a-94df7c21b049\",\r\n                \"entityName\": \"To Do\",\r\n                \"entityType\": \"CardList\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:53:59.210999\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"956493b3-a488-46f1-806f-3ce4779d5718\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:53:59 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"956493b3-a488-46f1-806f-3ce4779d5718\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"e1389304-466b-4931-ae9a-94df7c21b049\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"956493b3-a488-46f1-806f-3ce4779d5718\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"To Do\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"956493b3-a488-46f1-806f-3ce4779d5718\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"79d1bbca-f5d1-47aa-8dfc-10566c04742c\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityName\": \"Personal\",\r\n                \"entityType\": \"Board\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:53:51.495755\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"79d1bbca-f5d1-47aa-8dfc-10566c04742c\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Personal\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"79d1bbca-f5d1-47aa-8dfc-10566c04742c\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"79d1bbca-f5d1-47aa-8dfc-10566c04742c\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:53:51 PM\"\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        return of(actionLogs);\r\n    }\r\n\r\n    loadCardActionLogPaged(cardId: string, page: number, pageSize: number): Observable<ActionLog[]> {\r\n        const actionLogs: ActionLog[] = [\r\n            {\r\n                \"id\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"entityId\": \"f94eba62-f589-42e1-ac3a-c966d4c69172\",\r\n                \"entityName\": \"Card\",\r\n                \"entityType\": \"Card\",\r\n                \"action\": 0,\r\n                \"creationTime\": new Date(\"2024-05-15T16:55:25.668374\"),\r\n                \"affectedProperties\": [\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"ListId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"e1389304-466b-4931-ae9a-94df7c21b049\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"DueDate\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:55:12 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Id\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"f94eba62-f589-42e1-ac3a-c966d4c69172\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Priority\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Low\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"CreationTime\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"5/15/2024 4:55:25 PM\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Name\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Card\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"Description\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. \"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"ListName\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"To Do\"\r\n                    },\r\n                    {\r\n                        \"actionLogId\": \"df588ead-8d86-43f4-8497-81218d78b81c\",\r\n                        \"propertyName\": \"BoardId\",\r\n                        \"oldValue\": undefined,\r\n                        \"newValue\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\"\r\n                    }\r\n                ]\r\n            }]\r\n        return of(actionLogs);\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "loadBoardActionLogPaged",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActionLog[]>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCardActionLogPaged",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ActionLog[]>",
                    "typeParameters": [],
                    "line": 472,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "mockBoardService",
            "id": "class-mockBoardService-8e79c940bb4a835061388d0938f70331057541fbd9a2d257c72ec5b2e85b7803b725a7f8b0104f06b752cc49141b0add795f7f726079dba9382d07ec44f90d16",
            "file": "src/stories/mock-services/mockBoardService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, of } from \"rxjs\";\r\nimport { Board } from \"../../app/data/models/board\";\r\n\r\nexport class mockBoardService {\r\n\r\n\r\n    loadBoards(): Observable<Board[]> {\r\n        const boards: Board[] = [\r\n            {\r\n                \"id\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"name\": \"Personal\"\r\n            },\r\n            {\r\n                \"id\": \"ddf0b6a8-66b8-420b-96c8-9fa67ca3d31f\",\r\n                \"name\": \"Personal\"\r\n            },\r\n            {\r\n                \"id\": \"18cf93b9-5912-4a4f-92a2-182ad0251874\",\r\n                \"name\": \"Miscellaneous\"\r\n            }\r\n        ];\r\n\r\n        return of(boards);\r\n    }\r\n\r\n    createBoard(board: Board) {\r\n    }\r\n\r\n    updateBoard(board: Board) {\r\n    }\r\n\r\n    deleteBoard(boardId: string) {\r\n    }\r\n}",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Board[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "mockCardListService",
            "id": "class-mockCardListService-69f1e53eb6a015a2040e8e04dec5e4c7d908695aa285395ac9bfcc03f7a07e4df814e39ba29e117c8658625038fbbab2ad9f76786b56970685bdc7e8d148eb94",
            "file": "src/stories/mock-services/mockCardListService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardList } from '../../app/data/models/card-list';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport class mockCardListService {\r\n\r\n    public cardListsSubject: BehaviorSubject<CardList[]> = new BehaviorSubject<CardList[]>([]);\r\n    public cardLists$ = this.cardListsSubject.asObservable();\r\n\r\n    constructor() {\r\n        const initialCardLists: CardList[] = [\r\n            {\r\n                \"id\": \"e1389304-466b-4931-ae9a-94df7c21b049\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"name\": \"To Do\",\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"e84e8f4b-1ca0-4c55-80c1-8c68e72d5b23\",\r\n                        \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                        \"listId\": \"e1389304-466b-4931-ae9a-94df7c21b049\",\r\n                        \"name\": \"Card\",\r\n                        \"description\": \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\",\r\n                        \"dueDate\": new Date(\"2024-05-15T16:54:16.547\"),\r\n                        \"priority\": 2\r\n                    },\r\n                    {\r\n                        \"id\": \"f94eba62-f589-42e1-ac3a-c966d4c69172\",\r\n                        \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                        \"listId\": \"e1389304-466b-4931-ae9a-94df7c21b049\",\r\n                        \"name\": \"Card\",\r\n                        \"description\": \"Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. \",\r\n                        \"dueDate\": new Date(\"2024-05-15T16:55:12.937\"),\r\n                        \"priority\": 0\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"name\": \"In Process\",\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"bd96bfdb-6799-4f95-b243-8963f66cb22b\",\r\n                        \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                        \"listId\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\",\r\n                        \"name\": \"Card\",\r\n                        \"description\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\r\n                        \"dueDate\": new Date(\"2024-05-17T21:00:00\"),\r\n                        \"priority\": 0\r\n                    },\r\n                    {\r\n                        \"id\": \"8dd14ff9-bb3b-490a-94f8-0567dc6b668d\",\r\n                        \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                        \"listId\": \"afd2a0aa-a451-4472-93b1-9e1575d4c39b\",\r\n                        \"name\": \"Card\",\r\n                        \"description\": \"There are many variations of passages of Lorem Ipsum available\",\r\n                        \"dueDate\": new Date(\"2024-05-15T16:54:55.845\"),\r\n                        \"priority\": 1\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"id\": \"5405d8df-6c37-43a6-85c4-671dbc1b1236\",\r\n                \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                \"name\": \"Miscellaneous\",\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"347435bc-f00b-4715-ae04-b710ac4085cf\",\r\n                        \"boardId\": \"edee4bf4-617c-4e54-8183-24bfbb22dd34\",\r\n                        \"listId\": \"5405d8df-6c37-43a6-85c4-671dbc1b1236\",\r\n                        \"name\": \"Card\",\r\n                        \"description\": \" is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here',\",\r\n                        \"dueDate\": new Date(\"2024-05-24T21:00:00\"),\r\n                        \"priority\": 1\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        this.cardListsSubject.next(initialCardLists);\r\n    }\r\n\r\n    loadCardListsPaged(boardId: string, page: number, pageSize: number) {\r\n    }\r\n\r\n    createCardList(cardList: CardList) {\r\n    }\r\n\r\n    updateCardList(cardLists: CardList) {\r\n    }\r\n\r\n    deleteCardList(cardList: CardList) {\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "cardLists$",
                    "defaultValue": "this.cardListsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardListsSubject",
                    "defaultValue": "new BehaviorSubject<CardList[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<CardList[]>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createCardList",
                    "args": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCardList",
                    "args": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardList",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCardListsPaged",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCardList",
                    "args": [
                        {
                            "name": "cardLists",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardLists",
                            "type": "CardList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "mockCardService",
            "id": "class-mockCardService-d98941c6b2aeb33cddbfcd7bef2f291bbe98294a16902b691d9a52539c355d2dc2410cace3a6664c2d065077682c47a9e58884a49e4540548a48026b17c22355",
            "file": "src/stories/mock-services/mockCardService.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from '../../app/data/models/card';\r\n\r\n\r\nexport class mockCardService {\r\n\r\n    createCard(card: Card) {\r\n    }\r\n\r\n    updateCard(card: Card) {\r\n    }\r\n\r\n    deleteCard(card: Card) {\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionHistoryComponent",
            "id": "component-ActionHistoryComponent-111951b3569e1a0028c7354330be6c715a72d01fb640630f40c6b15c4cfbbc7546293b73d4e743a993aa43ea96a1d34439fad395055d9c094b900426523065c6",
            "file": "src/app/components/action-history/action-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-history",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./action-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionLogs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ActionLog[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionType",
                    "defaultValue": "ActionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getPropertyLogByPropertyName",
                    "args": [
                        {
                            "name": "actionLog",
                            "type": "ActionLog",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PropertyLog | null",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actionLog",
                            "type": "ActionLog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { ActionLog } from '../../data/models/action-log';\r\nimport { ActionType } from '../../data/enums/actionType';\r\nimport { PropertyLog } from '../../data/models/property-log';\r\n\r\n@Component({\r\n  selector: 'app-action-history',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIcon],\r\n  templateUrl: './action-history.component.html',\r\n  styleUrl: './action-history.component.css'\r\n})\r\nexport class ActionHistoryComponent {\r\n  @Input() actionLogs: ActionLog[]\r\n\r\n  public actionType = ActionType;\r\n\r\n  getPropertyLogByPropertyName(\r\n    actionLog: ActionLog,\r\n    propertyName: string\r\n  ): PropertyLog | null {\r\n\r\n    const matchingProperty = actionLog.affectedProperties.find(\r\n      (property) => property.propertyName === propertyName\r\n    );\r\n    return matchingProperty || null;\r\n  }\r\n\r\n}",
            "styleUrl": "./action-history.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"action-history\">\r\n    <ul>\r\n        <div *ngFor=\"let action of actionLogs\">\r\n            @if (action.entityType == \"CardList\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    @if(action.action == actionType.Added) {\r\n                    <span>You created <b> {{action.entityName}} </b> list</span>\r\n                    }\r\n                    @else if(action.action == actionType.Deleted) {\r\n                    <span>You deleted <b> {{action.entityName}} </b> list</span>\r\n                    }\r\n                    @else if(action.action == actionType.Modified) {\r\n                    <span>You changed list name from\r\n                        <b> {{getPropertyLogByPropertyName(action,'Name')?.oldValue}} </b> to\r\n                        <b> {{getPropertyLogByPropertyName(action,'Name')?.newValue}} </b>\r\n                    </span>\r\n                    }\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            @else if(action.entityType === \"Card\") {\r\n            @if(action.action == actionType.Added) {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You added <b class=\"action-history__item__card-name\">\r\n                            <mat-icon>radio_button_checked</mat-icon>\r\n                            {{action.entityName}} </b> to\r\n                        {{getPropertyLogByPropertyName(action, 'ListName')?.newValue}} </span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            @else if(action.action === actionType.Deleted) {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You deleted <b class=\"action-history__item__card-name\">\r\n                            <mat-icon>radio_button_checked</mat-icon>\r\n                            {{action.entityName}} </b> from\r\n                        {{getPropertyLogByPropertyName(action, 'ListName')?.oldValue}} </span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n\r\n            }\r\n            @else if(action.action === actionType.Modified) {\r\n            @for(prop of action.affectedProperties; track prop.actionLogId) {\r\n            @if(prop.propertyName === \"Name\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You renamed from <b class=\"action-history__item__card-name\">\r\n                            <mat-icon>radio_button_checked</mat-icon> {{prop.oldValue}}</b>\r\n                        to <b class=\"action-history__item__card-name\"> <mat-icon>radio_button_checked</mat-icon>\r\n                            {{prop.newValue}} </b> </span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n\r\n            }\r\n            @else if(prop.propertyName === \"Description\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span> You changed the description <b class=\"action-history__item__card-name\">\r\n                            <mat-icon>radio_button_checked</mat-icon> {{action.entityName}}\r\n                        </b>\r\n                    </span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            @else if(prop.propertyName === \"Priority\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You changed the priority <b\r\n                            class=\"action-history__item__card-name\"><mat-icon>radio_button_checked</mat-icon>\r\n                            {{action.entityName}}</b>\r\n                        from <b> {{prop.oldValue}} </b> to\r\n                        <b> {{prop.newValue}} </b></span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            @else if(prop.propertyName === \"DueDate\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You changed the due date <b class=\"action-history__item__card-name\">\r\n                            <mat-icon>radio_button_checked</mat-icon>\r\n                            {{action.entityName}}\r\n                        </b>\r\n                        from <b> {{ prop.oldValue | date: 'MMM d, y, h:mm a'}} </b> to\r\n                        <b> {{ prop.newValue | date: 'MMM d, y, h:mm a'}} </b> </span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            @else if(prop.propertyName === \"ListName\") {\r\n            <li>\r\n                <div class=\"action-history__item\">\r\n                    <span>You moved <b class=\"action-history__item__card-name\"><mat-icon>radio_button_checked</mat-icon>\r\n                            {{action.entityName}} </b>\r\n                        from <b> {{prop.oldValue}} </b> to\r\n                        <b>{{prop.newValue}}</b></span>\r\n                    {{ action.creationTime| date: 'MMM d '}} at {{ action.creationTime | date: 'h:mm a' }}\r\n                </div>\r\n            </li>\r\n            }\r\n            }\r\n            }\r\n            }\r\n        </div>\r\n    </ul>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8324d67f8040f9770fc0678a0ccad8ac841ad377fd88993b06faccd1136ebe566e3ab9eb2a9dd83ffd27035d91b7259b2ca6819b18d6d730395d380005fbe7d4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isBoardHistoryVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isBoardListVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedBoard$",
                    "defaultValue": "this.store.select(selectSelectedBoard)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BoardListComponent",
                    "type": "component"
                },
                {
                    "name": "BoardComponent",
                    "type": "component"
                },
                {
                    "name": "BoardActionHistoryComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BoardListComponent } from \"./components/board-list/board-list.component\";\r\nimport { BoardComponent } from \"./components/board/board.component\";\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BoardActionHistoryComponent } from \"./components/board-action-history/board-action-history.component\";\r\nimport * as BoardActions from './store/board/board.actions'\r\nimport { selectSelectedBoard } from './store/board/board.selectors';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css',\r\n  imports: [CommonModule, BoardListComponent, BoardComponent, BoardActionHistoryComponent]\r\n})\r\nexport class AppComponent {\r\n\r\n  selectedBoard$ = this.store.select(selectSelectedBoard);\r\n\r\n\r\n  constructor(public dialog: MatDialog, private store: Store) { }\r\n\r\n  isBoardListVisible = true;\r\n  isBoardHistoryVisible = false;\r\n\r\n  ngOnInit() {\r\n    this.store.dispatch(BoardActions.loadBoards());\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"app\">\r\n    <app-board-list *ngIf=\"isBoardListVisible\" (hideEvent)=\"isBoardListVisible=false\" />\r\n    <app-board [board]=\"selectedBoard$ | async\" (changeBoardEvent)=\"isBoardListVisible=true\"\r\n        (openHistoryEvent)=\"isBoardHistoryVisible=true\" />\r\n    <app-board-action-history *ngIf=\"isBoardHistoryVisible\" (closeEvent)=\"isBoardHistoryVisible=false\"\r\n        [board]=\"selectedBoard$ | async\" />\r\n</div>"
        },
        {
            "name": "BoardActionHistoryComponent",
            "id": "component-BoardActionHistoryComponent-98be436e1311253759095130248f0bd6f419ecbd5ae2071e33b89f2bac50076f30ab9989fbc0ba1809e5c5036f7928655f0201c9ca591c10a378a4f4d957ac2c",
            "file": "src/app/components/board-action-history/board-action-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-action-history",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board-action-history.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Board | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionLog[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "actionLogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionLogService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isEndReached",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadActionLogs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ActionHistoryComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\nimport { ActionHistoryComponent } from \"../action-history/action-history.component\";\r\nimport { ActionLogService } from '../../services/action-log.service';\r\nimport { ActionLog } from '../../data/models/action-log';\r\nimport { Board } from '../../data/models/board';\r\n\r\n@Component({\r\n  selector: 'app-board-action-history',\r\n  standalone: true,\r\n  templateUrl: './board-action-history.component.html',\r\n  styleUrl: './board-action-history.component.css',\r\n  imports: [ActionHistoryComponent, CommonModule, MatIcon]\r\n})\r\nexport class BoardActionHistoryComponent {\r\n\r\n  constructor(public actionLogService: ActionLogService) { }\r\n\r\n  @Input() board: Board | undefined | null;\r\n\r\n  @Output() closeEvent = new EventEmitter<boolean>();\r\n\r\n  actionLogs: ActionLog[] = [];\r\n\r\n  currentPage: number = 1;\r\n  isEndReached: boolean = false;\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.actionLogs = [];\r\n    this.currentPage = 1;\r\n    this.isEndReached = false;\r\n    this.loadActionLogs();\r\n  }\r\n\r\n  loadActionLogs() {\r\n    if (this.board) {\r\n      this.actionLogService.loadBoardActionLogPaged(this.board.id, this.currentPage, 20).subscribe({\r\n        next: (data) => {\r\n          if (data.length != 0) {\r\n            this.actionLogs = this.actionLogs.concat(data);\r\n            this.currentPage++;\r\n          }\r\n          else {\r\n            this.isEndReached = true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.closeEvent.emit();\r\n  }\r\n}",
            "styleUrl": "./board-action-history.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actionLogService",
                        "type": "ActionLogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actionLogService",
                        "type": "ActionLogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"board-action-history\">\r\n\r\n    <div class=\"modal__header\">\r\n        History\r\n        <mat-icon (click)=\"close()\">close</mat-icon>\r\n    </div>\r\n\r\n    <app-action-history [actionLogs]=\"actionLogs\"></app-action-history>\r\n\r\n    <div *ngIf=\"!this.isEndReached\" class=\"history-sidebar__load-more\" (click)=\"this.loadActionLogs()\">\r\n        <mat-icon>replay</mat-icon>\r\n        Show more\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-7a427b524a46658c4e7a121e487ce583e1a513332e3a39c0a9f7534226c834950cf744dd8146c891abc9ee1d150fbdcbdd9f92162d88380f21a74f86b2b6260f",
            "file": "src/app/components/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Board | undefined | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeBoardEvent",
                    "defaultValue": "new EventEmitter<void>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "openHistoryEvent",
                    "defaultValue": "new EventEmitter<void>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "boardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardListService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardListService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isNewListFormVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "newList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardList",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "changeBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createCardList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CardListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { CardListComponent } from \"../card-list/card-list.component\";\r\nimport { CardListService } from '../../services/card-list.service';\r\nimport { CardList } from '../../data/models/card-list';\r\nimport { BoardService } from '../../services/board.service';\r\nimport { Board } from '../../data/models/board';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  standalone: true,\r\n  templateUrl: './board.component.html',\r\n  styleUrl: './board.component.css',\r\n  imports: [CommonModule, MatIconModule, FormsModule, CardListComponent]\r\n})\r\nexport class BoardComponent {\r\n\r\n  isNewListFormVisible: boolean = false;\r\n  newList: CardList;\r\n\r\n  private _board: Board | undefined | null;\r\n\r\n  constructor(\r\n    public cardListService: CardListService,\r\n    public boardService: BoardService) { }\r\n\r\n  @Output() changeBoardEvent = new EventEmitter<void>;\r\n  @Output() openHistoryEvent = new EventEmitter<void>;\r\n\r\n  @Input()\r\n  set board(board: Board | undefined | null) {\r\n\r\n    this._board = board;\r\n\r\n    if (this._board) {\r\n      this.cardListService.loadCardListsPaged(this._board.id, 1, 25);\r\n      this.newList = { id: '', boardId: this._board.id, name: 'New List', items: [] }\r\n    }\r\n\r\n  }\r\n\r\n  get board(): Board | undefined | null {\r\n    return this._board;\r\n  }\r\n\r\n  createCardList() {\r\n    if (this.newList) {\r\n      this.cardListService.createCardList(this.newList);\r\n      this.newList.name = 'New List';\r\n      this.isNewListFormVisible = false;\r\n    }\r\n  }\r\n\r\n  changeBoard() {\r\n    this.changeBoardEvent.emit();\r\n  }\r\n\r\n  openHistory() {\r\n    this.openHistoryEvent.emit();\r\n  }\r\n}\r\n",
            "styleUrl": "./board.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "board": {
                    "name": "board",
                    "setSignature": {
                        "name": "board",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "board",
                                "type": "Board | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "board",
                                "type": "Board | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "board",
                        "type": "",
                        "returnType": "Board | undefined | null",
                        "line": 45
                    }
                }
            },
            "templateData": "<div class=\"board\" *ngIf=\"board\">\r\n    <div class=\"board__header\">\r\n        <div class=\"board__header__left\">\r\n            <div class=\"board__name\">{{board.name}}</div>\r\n            <button class=\"board__change\" (click)=\"changeBoard()\">Select board</button>\r\n        </div>\r\n\r\n        <div class=\"board__history\" (click)=\"openHistory()\">\r\n            <mat-icon>history</mat-icon>\r\n            History\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"board__card-lists\">\r\n        <app-card-list *ngFor=\"let cardList of cardListService.cardLists$ | async\"\r\n            [cardList]=\"cardList\"></app-card-list>\r\n\r\n        <div class=\"add-list\">\r\n            <div class=\"add-list__button\" *ngIf=\"!isNewListFormVisible\" (click)=\"this.isNewListFormVisible = true\">\r\n                Add another list\r\n                <mat-icon>add</mat-icon>\r\n            </div>\r\n\r\n            <form class=\"add-list__form\" #cardListForm=\"ngForm\" (ngSubmit)=\"createCardList()\"\r\n                *ngIf=\"isNewListFormVisible\">\r\n                <input class=\"add-list__input\" type=\"text\" name=\"name\" [(ngModel)]=\"newList.name\" required>\r\n                <div class=\"add-list__buttons\">\r\n                    <button class=\"add-list__create\" type=\"submit\" [disabled]=\"!cardListForm.form.valid\">Add\r\n                        list</button>\r\n                    <button class=\"add-list__cancel\" (click)=\"isNewListFormVisible = false\">Cancel</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"board__none\" *ngIf=\"!board\">\r\n    Select an existing board or create a new one\r\n    <button class=\"board__change\" (click)=\"changeBoard()\">Select board</button>\r\n</div>"
        },
        {
            "name": "BoardEditModalComponent",
            "id": "component-BoardEditModalComponent-eba100836529aa3bb3f208255fd829b844da366e448411b9328fc9f9c026b810984900222d4dbcf47cc2ce710e6caa7f966abed572aec01dcf57df7779b01845",
            "file": "src/app/components/board-edit-modal/board-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-edit-modal",
            "styleUrls": [
                "./board-edit-modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Board",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<BoardEditModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Board } from '../../data/models/board';\r\n\r\n@Component({\r\n  selector: 'app-board-edit-modal',\r\n  templateUrl: './board-edit-modal.component.html',\r\n  styleUrls: ['./board-edit-modal.component.css'],\r\n  standalone: true,\r\n  imports: [FormsModule, MatIcon]\r\n})\r\nexport class BoardEditModalComponent {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<BoardEditModalComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: Board,\r\n  ) { }\r\n\r\n  onSubmit(): void {\r\n    this.dialogRef.close(this.data);\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal {\r\n    max-width: 400px;\r\n}\r\n\r\n.board-edit-modal {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 25px;\r\n}\r\n\r\n.form-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.form-group label {\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n}\r\n\r\n.form-group input {\r\n    margin-top: 5px;\r\n    font-size: 24px;\r\n    border: none;\r\n    border-width: 0 0 1px 0;\r\n    border-style: solid;\r\n    border-color: #cbcbeb;\r\n}\r\n\r\ncreate-card-modal__body__card:focus,\r\ninput:focus {\r\n    outline: none;\r\n}",
                    "styleUrl": "./board-edit-modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoardEditModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BoardEditModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Board",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"modal\">\r\n\r\n    <div class=\"modal__header\">\r\n        <div>Edit Board</div>\r\n        <mat-icon (click)=\"onNoClick()\">\r\n            close\r\n        </mat-icon>\r\n    </div>\r\n\r\n    <div class=\"modal__body\">\r\n        <form class=\"board-edit-modal\" (ngSubmit)=\"onSubmit()\" #boardForm=\"ngForm\">\r\n            <div class=\"form-group\">\r\n                <label for=\"boardName\">Name</label>\r\n                <input type=\"text\" id=\"boardName\" name=\"name\" [(ngModel)]=\"data.name\" required>\r\n            </div>\r\n            <div class=\"modal__buttons\">\r\n                <button class=\"modal__buttons__save\" type=\"submit\" [disabled]=\"!boardForm.form.valid\">Save</button>\r\n                <button class=\"modal__buttons__cancel\" type=\"button\" (click)=\"onNoClick()\">Cancel</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "BoardListComponent",
            "id": "component-BoardListComponent-2b75f2e5bd497e719ea3eed470a7985a2e33447b867b71f0c6c6e1d2b8d0bb1af42bef5a32174aa17823d89de7fd7f567f22a0a45ca3c1b1bfbabd6978cc5847",
            "file": "src/app/components/board-list/board-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-list",
            "styleUrls": [
                "./board-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "boards$",
                    "defaultValue": "this.store.select(selectAllBoards)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Board[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(selectLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedBoard$",
                    "defaultValue": "this.store.select(selectSelectedBoard)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Board",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "BoardListItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { BoardEditModalComponent } from '../board-edit-modal/board-edit-modal.component';\r\nimport { Board } from '../../data/models/board';\r\nimport * as BoardActions from '../../store/board/board.actions';\r\nimport { selectAllBoards, selectLoading, selectSelectedBoard } from '../../store/board/board.selectors';\r\nimport { BoardListItemComponent } from \"../board-list-item/board-list-item.component\";\r\n\r\n@Component({\r\n  selector: 'app-board-list',\r\n  templateUrl: './board-list.component.html',\r\n  styleUrls: ['./board-list.component.css'],\r\n  standalone: true,\r\n  imports: [CommonModule, MatIcon, MatProgressSpinnerModule, BoardListItemComponent]\r\n})\r\nexport class BoardListComponent {\r\n\r\n  @Output() hideEvent = new EventEmitter<void>();\r\n\r\n  boards$: Observable<Board[]> = this.store.select(selectAllBoards);\r\n  selectedBoard$ = this.store.select(selectSelectedBoard);\r\n  loading$: Observable<boolean> = this.store.select(selectLoading);\r\n\r\n  constructor(public dialog: MatDialog, private store: Store) { }\r\n\r\n  ngOnInit() {\r\n    this.store.dispatch(BoardActions.loadBoards());\r\n  }\r\n\r\n  selectBoard(board: Board) {\r\n    this.store.dispatch(BoardActions.selectBoard({ boardId: board.id }));\r\n    this.hideEvent.emit();\r\n  }\r\n\r\n  createBoard(): void {\r\n    const dialogRef = this.dialog.open(BoardEditModalComponent, {\r\n      data: { name: \"\" }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.store.dispatch(BoardActions.createBoard({ board: result }));\r\n      }\r\n    });\r\n  }\r\n\r\n  updateBoard(board: Board): void {\r\n    const dialogRef = this.dialog.open(BoardEditModalComponent, {\r\n      data: { ...board }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.store.dispatch(BoardActions.updateBoard({ board: result }));\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteBoard(board: Board): void {\r\n    this.store.dispatch(BoardActions.deleteBoard({ boardId: board.id }));\r\n  }\r\n\r\n  hide() {\r\n    this.hideEvent.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".board-list {\r\n    width: 250px;\r\n    height: 100%;\r\n    background-color: white;\r\n    box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\r\n    z-index: 1;\r\n}\r\n\r\n.loading-spinner {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 90%;\r\n}\r\n\r\n@media(max-width: 600px) {\r\n    .board-list {\r\n        position: fixed;\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n.modal__header {\r\n    border-radius: 0px;\r\n    justify-content: right;\r\n}\r\n\r\n.board__header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 25px;\r\n    font-weight: 500;\r\n    font-size: 24px;\r\n}\r\n\r\n.board .selected-board {\r\n    border: 1px solid red;\r\n}",
                    "styleUrl": "./board-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"board-list\">\r\n    <div class=\"modal__header\">\r\n        <mat-icon (click)=\"hide()\">close</mat-icon>\r\n    </div>\r\n\r\n    <div *ngIf=\"loading$ | async\" class=\"loading-spinner\">\r\n        <mat-spinner></mat-spinner>\r\n    </div>\r\n\r\n    <div class=\"board__header\" *ngIf=\"!(loading$ | async)\">\r\n        My Boards\r\n        <mat-icon (click)=\"createBoard()\">add</mat-icon>\r\n    </div>\r\n\r\n    <app-board-list-item *ngFor=\"let board of boards$ | async\" [board]=\"board\"\r\n        (boardSelectedEvent)=\"selectBoard($event)\" (updateBoardEvent)=\"updateBoard($event)\"\r\n        (deleteBoardEvent)=\"deleteBoard($event)\">\r\n    </app-board-list-item>\r\n</div>"
        },
        {
            "name": "BoardListItemComponent",
            "id": "component-BoardListItemComponent-e33a151b32263ddda3d69a9f199a0d793d1fecdf97c5a6d6db12b4276772e717432ecf417c3c90a77e9a9156d7a6bc8e611bd95b4a9e1b08f342a87c888c1bba",
            "file": "src/app/components/board-list-item/board-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-list-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board-list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Board",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "boardSelectedEvent",
                    "defaultValue": "new EventEmitter<Board>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteBoardEvent",
                    "defaultValue": "new EventEmitter<Board>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateBoardEvent",
                    "defaultValue": "new EventEmitter<Board>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onBoardClick",
                    "args": [
                        {
                            "name": "board",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onButtonClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Board } from '../../data/models/board';\r\n\r\n@Component({\r\n  selector: 'app-board-list-item',\r\n  standalone: true,\r\n  imports: [MatIconModule, MatMenuModule, MatButtonModule],\r\n  templateUrl: './board-list-item.component.html',\r\n  styleUrl: './board-list-item.component.css'\r\n})\r\nexport class BoardListItemComponent {\r\n  @Input() board: Board;\r\n\r\n  @Output() boardSelectedEvent = new EventEmitter<Board>();\r\n\r\n  @Output() updateBoardEvent = new EventEmitter<Board>();\r\n\r\n  @Output() deleteBoardEvent = new EventEmitter<Board>();\r\n\r\n  onBoardClick(board: any) {\r\n    this.boardSelectedEvent.emit(board);\r\n  }\r\n\r\n  onButtonClick(event: MouseEvent) {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n",
            "styleUrl": "./board-list-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"board-list-item\" (click)=\"onBoardClick(board)\">\r\n    {{board.name}}\r\n\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"onButtonClick($event)\">\r\n        <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n\r\n    <mat-menu #menu=\"matMenu\">\r\n\r\n        <button mat-menu-item (click)=\"updateBoardEvent.emit(board)\">\r\n            <mat-icon>edit</mat-icon>\r\n            <span>Edit</span>\r\n        </button>\r\n\r\n        <button class=\"board-list__delete\" mat-menu-item (click)=\"deleteBoardEvent.emit(board)\">\r\n            <mat-icon>delete</mat-icon>\r\n            <span>Delete</span>\r\n        </button>\r\n\r\n    </mat-menu>\r\n</div>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-813df11674ce188ea57722301a87f1f221cc8a1bdb8be954fd32a85749cefbf46347dd646a6f2234b06dcbf66ad42528c63a21f99d2447994e47f297a44c49e1",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardListService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardListService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPriorityCssClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onListChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "PriorityPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectChange, MatSelectModule } from '@angular/material/select';\r\n\r\nimport { PriorityPipe } from '../../pipes/priority.pipe';\r\n\r\nimport { Card } from '../../data/models/card';\r\nimport { CardService } from '../../services/card.service';\r\nimport { CardListService } from '../../services/card-list.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CardEditModalComponent } from '../card-edit-modal/card-edit-modal.component';\r\nimport { CardModalComponent } from '../card-modal/card-modal.component';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    MatMenuModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    PriorityPipe\r\n  ],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.css'\r\n})\r\nexport class CardComponent {\r\n  @Input() card: Card;\r\n\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    public cardService: CardService,\r\n    public cardListService: CardListService) { }\r\n\r\n  openCard() {\r\n    this.dialog.open(CardModalComponent,\r\n      {\r\n        data: Object.assign({}, this.card)\r\n      }\r\n    );\r\n  }\r\n\r\n  editCard() {\r\n    const dialogRef = this.dialog.open(CardEditModalComponent, {\r\n      data: Object.assign({}, this.card)\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.cardService.updateCard(result).subscribe({\r\n          next: (data) => {\r\n            this.cardListService.loadCardListsPaged(this.card.boardId, 1, 50);\r\n          },\r\n          error: (error) => {\r\n            console.log(error);\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteCard() {\r\n    this.cardService.deleteCard(this.card).subscribe({\r\n      next: () => {\r\n        this.cardListService.loadCardListsPaged(this.card.boardId, 1, 50);\r\n      },\r\n      error: (error) => {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  onListChange(event: MatSelectChange) {\r\n    this.cardService.updateCard(this.card).subscribe({\r\n      next: () => {\r\n        this.cardListService.loadCardListsPaged(this.card.boardId, 1, 50);\r\n      },\r\n      error: (erorr) => {\r\n        console.log(erorr);\r\n      }\r\n    })\r\n  }\r\n\r\n  getPriorityCssClass(): string {\r\n    if (this.card && this.card.priority === 0) {\r\n      return 'priority-low';\r\n    } else if (this.card && this.card.priority === 1) {\r\n      return 'priority-medium';\r\n    } else if (this.card && this.card.priority === 2) {\r\n      return 'priority-high';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"card\">\r\n\r\n    <div class=\"card__header\">\r\n\r\n        <div class=\"card__name\" (click)=\"openCard()\">{{card.name}}</div>\r\n\r\n        <div>\r\n\r\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n\r\n            <mat-menu class=\"card__menu\" #menu=\"matMenu\">\r\n\r\n                <button mat-menu-item (click)=\"editCard()\">\r\n                    <mat-icon>edit</mat-icon>\r\n                    <span>Edit</span>\r\n                </button>\r\n\r\n                <button mat-menu-item class=\"card__delete\" (click)=\"deleteCard()\">\r\n                    <mat-icon>delete</mat-icon>\r\n                    <span>Delete</span>\r\n                </button>\r\n\r\n            </mat-menu>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"card__description\">\r\n        {{card.description}}\r\n    </div>\r\n\r\n    <div class=\"card__dueDate\">\r\n        <mat-icon>calendar_today</mat-icon>\r\n        {{this.card.dueDate.toString() | date: 'MMM d, yyyy'}}\r\n    </div>\r\n\r\n    <div class=\"card__priority\">\r\n\r\n        <div class=\"card__priority__symbol {{getPriorityCssClass()}}\">\r\n            &#x2022;\r\n        </div>\r\n\r\n        <div class=\"card__priority__text\">\r\n            {{this.card.priority | priority }}\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <mat-form-field class=\"card__card-list\" subscriptSizing=\"dynamic\">\r\n        <mat-select [(ngModel)]=\"card.listId\" (selectionChange)=\"onListChange($event)\">\r\n            <mat-option *ngFor=\"let list of cardListService.cardLists$ | async\" [value]=\"list.id\">\r\n                {{ list.name }}\r\n            </mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n\r\n</div>"
        },
        {
            "name": "CardEditModalComponent",
            "id": "component-CardEditModalComponent-cd3d28f154bd45dd284f8523c8f55b976ca46b232216f656c2fbdea00dc537b7ef32c75d4e6831514359b244ecd9ccce2719be262297e07cc33b185ccb9db40b",
            "file": "src/app/components/card-edit-modal/card-edit-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-edit-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-edit-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardListService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardListService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CardEditModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { Card } from '../../data/models/card';\r\nimport { CardListService } from '../../services/card-list.service';\r\n\r\n@Component({\r\n  selector: 'app-card-edit-modal',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatIcon,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatDatepickerModule\r\n  ],\r\n  templateUrl: './card-edit-modal.component.html',\r\n  styleUrl: './card-edit-modal.component.css'\r\n})\r\nexport class CardEditModalComponent {\r\n\r\n  constructor(\r\n    public cardListService: CardListService,\r\n    public dialogRef: MatDialogRef<CardEditModalComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: Card,\r\n  ) { }\r\n\r\n  onSubmit(): void {\r\n    this.dialogRef.close(this.data);\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "styleUrl": "./card-edit-modal.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardEditModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardEditModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Card",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"modal\">\r\n\r\n    <div class=\"modal__header\">\r\n        <div>Edit Card</div>\r\n        <mat-icon (click)=\"onNoClick()\">close</mat-icon>\r\n    </div>\r\n\r\n    <div class=\"modal__body\">\r\n\r\n        <form class=\"card-edit-modal\" #editForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n            <input class=\"card-edit-modal__name\" [(ngModel)]=\"data.name\" name=\"name\" required>\r\n\r\n            <div class=\"card-edit-modal__props\">\r\n\r\n                <div class=\"card-edit-modals__labels\">\r\n\r\n                    <div class=\"card-edit-modal__label\">\r\n                        <mat-icon>list</mat-icon>\r\n                        List\r\n                    </div>\r\n\r\n                    <div class=\"card-edit-modal__label\">\r\n                        <mat-icon>calendar_today</mat-icon>\r\n                        Due date\r\n                    </div>\r\n\r\n                    <div class=\"card-edit-modal__label\">\r\n                        <mat-icon>sell</mat-icon>\r\n                        Priority\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"card-edit-modal__inputs\">\r\n\r\n                    <mat-form-field>\r\n                        <mat-select [(ngModel)]=\"data.listId\" [value]=\"data.listId\" name=\"listId\">\r\n                            <mat-option *ngFor=\"let list of cardListService.cardLists$ | async\" [value]=\"list.id\">{{\r\n                                list.name }}</mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <mat-label>Due date</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"data.dueDate\" [value]=\"data.dueDate\"\r\n                            name=\"dueDate\">\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"create-card-modal__body__card-list\">\r\n                        <mat-select placeholder=\"Priority\" [(ngModel)]=\"data.priority\" [value]=\"data.priority\"\r\n                            name=\"priority\">\r\n                            <mat-option [value]=\"0\">Low</mat-option>\r\n                            <mat-option [value]=\"1\">Medium</mat-option>\r\n                            <mat-option [value]=\"2\">High</mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <h2>Description</h2>\r\n            <mat-form-field class=\"card-edit-modal__description\">\r\n                <textarea matInput [(ngModel)]=\"data.description\" placeholder=\"Write some information...\"\r\n                    name=\"description\"></textarea>\r\n            </mat-form-field>\r\n\r\n            <div class=\"modal__buttons\">\r\n                <button class=\"modal__buttons__save\" type=\"submit\" [disabled]=\"!editForm.valid\">Save</button>\r\n                <button class=\"modal__buttons__cancel\" type=\"button\" (click)=\"onNoClick()\">Cancel</button>\r\n            </div>\r\n\r\n        </form>\r\n\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "CardListComponent",
            "id": "component-CardListComponent-23b47c3edb82ab4de4b356b2d57e91629d84f40fc2a841610e40dc3fa19c092ad2eea869db0ade116f2e0d6f55b7d794e460dcbcc64322033fbbc98d9e488d79",
            "file": "src/app/components/card-list/card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "CardList | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_cardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardList | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardListService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardListService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isFormVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "newCardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardList",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCardList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCardList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, SimpleChanges } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nimport { CardList } from '../../data/models/card-list';\r\nimport { CardListService } from '../../services/card-list.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CardEditModalComponent } from '../card-edit-modal/card-edit-modal.component';\r\nimport { CardService } from '../../services/card.service';\r\nimport { Priority } from '../../data/enums/priority';\r\nimport { CardComponent } from \"../card/card.component\";\r\nimport { switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-card-list',\r\n  standalone: true,\r\n  templateUrl: './card-list.component.html',\r\n  styleUrl: './card-list.component.css',\r\n  imports: [CommonModule, FormsModule, MatIconModule, MatMenuModule, MatButtonModule, CardComponent]\r\n})\r\nexport class CardListComponent {\r\n\r\n  private _cardList: CardList | null;\r\n\r\n  public isFormVisible: boolean = false;\r\n  public newCardList: CardList;\r\n\r\n  constructor(public dialog: MatDialog, public cardListService: CardListService, public cardService: CardService) { }\r\n\r\n  @Input()\r\n  set cardList(cardList: CardList | null) {\r\n    this._cardList = cardList;\r\n    if (this._cardList) {\r\n      this.newCardList = JSON.parse(JSON.stringify(this._cardList));\r\n    }\r\n  }\r\n\r\n  get cardList(): CardList | null {\r\n    return this._cardList;\r\n  }\r\n\r\n  updateCardList() {\r\n    this.cardListService.updateCardList(this.newCardList);\r\n  }\r\n\r\n  deleteCardList() {\r\n    if (this.cardList) {\r\n      this.cardListService.deleteCardList(this.cardList);\r\n    }\r\n  }\r\n\r\n  createCard() {\r\n    const dialogRef = this.dialog.open(CardEditModalComponent, {\r\n      data: {\r\n        boardId: this._cardList?.boardId,\r\n        listId: this._cardList?.id,\r\n        name: \"Card\",\r\n        dueDate: new Date(),\r\n        priority: Priority.Medium\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.cardService.createCard(result).subscribe({\r\n          next: () => {\r\n            if (this.cardList) {\r\n              this.cardListService.loadCardListsPaged(this.cardList.boardId, 1, 50);\r\n            }\r\n          },\r\n          error: (error) => {\r\n            console.log(error);\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./card-list.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "cardList": {
                    "name": "cardList",
                    "setSignature": {
                        "name": "cardList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cardList",
                                "type": "CardList | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "cardList",
                                "type": "CardList | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "cardList",
                        "type": "",
                        "returnType": "CardList | null",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"card-list\" *ngIf=\"cardList\">\r\n\r\n    <div *ngIf=\"!isFormVisible\">\r\n\r\n        <div class=\"card-list__header\">\r\n\r\n            <div class=\"card-list__header__name\">\r\n                {{cardList.name}}\r\n            </div>\r\n\r\n            <div class=\"card-list__header__right-bloc\">\r\n\r\n                {{cardList.items.length}}\r\n\r\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\">\r\n                    <mat-icon>more_vert</mat-icon>\r\n                </button>\r\n\r\n                <mat-menu #menu=\"matMenu\" class=\"list__menu\">\r\n\r\n                    <button mat-menu-item (click)=\"isFormVisible=true\">\r\n                        <mat-icon>edit</mat-icon>\r\n                        <span>Edit</span>\r\n                    </button>\r\n\r\n                    <button mat-menu-item class=\"list__menu__delete\" (click)=\"deleteCardList()\">\r\n                        <mat-icon>delete</mat-icon>\r\n                        <span>Delete</span>\r\n                    </button>\r\n\r\n                </mat-menu>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <button class=\"card-list__add\" (click)=\"createCard()\">\r\n            <mat-icon>add</mat-icon>\r\n            <div>Add new card</div>\r\n        </button>\r\n\r\n    </div>\r\n\r\n    <form class=\"edit-list__form\" #cardListForm=\"ngForm\" (ngSubmit)=\"updateCardList()\" *ngIf=\"isFormVisible\">\r\n\r\n        <input class=\"edit-list__input\" type=\"text\" name=\"name\" [(ngModel)]=\"newCardList.name\" required>\r\n\r\n        <div class=\"edit-list__buttons\">\r\n            <button class=\"edit-list__create\" type=\"submit\" [disabled]=\"!cardListForm.form.valid\">Save</button>\r\n            <button class=\"edit-list__cancel\" (click)=\"isFormVisible = !isFormVisible\">Cancel</button>\r\n        </div>\r\n\r\n    </form>\r\n\r\n    <div class=\"card-list__cards\">\r\n        <app-card *ngFor=\"let card of  this.cardList.items\" [card]=\"card\" />\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "CardModalComponent",
            "id": "component-CardModalComponent-d0a21ea34bc56268c3c56db852afaace5f2bcf6f1606e50d88629caa3821a1decbd086d4a3e0333ad75c478bd491b13ec7a54823f7c9cb2dc776fa1ae02a042c",
            "file": "src/app/components/card-modal/card-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "actionLogs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionLog[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "actionLogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionLogService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardListService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardListService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cardService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CardModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "initialData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onListChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "PriorityPipe",
                    "type": "pipe"
                },
                {
                    "name": "ActionHistoryComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatSelectChange, MatSelectModule } from '@angular/material/select';\r\n\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { CardListService } from '../../services/card-list.service';\r\nimport { Card } from '../../data/models/card';\r\nimport { CardService } from '../../services/card.service';\r\n\r\nimport { PriorityPipe } from '../../pipes/priority.pipe';\r\nimport { CardEditModalComponent } from '../card-edit-modal/card-edit-modal.component';\r\nimport { ActionLogService } from '../../services/action-log.service';\r\nimport { ActionLog } from '../../data/models/action-log';\r\nimport { ActionHistoryComponent } from \"../action-history/action-history.component\";\r\n\r\n@Component({\r\n  selector: 'app-card-modal',\r\n  standalone: true,\r\n  templateUrl: './card-modal.component.html',\r\n  styleUrl: './card-modal.component.css',\r\n  imports: [CommonModule, MatIcon, FormsModule, MatSelectModule, PriorityPipe, ActionHistoryComponent]\r\n})\r\nexport class CardModalComponent {\r\n\r\n  public actionLogs: ActionLog[];\r\n\r\n  private _data: Card;\r\n\r\n  constructor(\r\n    public cardListService: CardListService,\r\n    public cardService: CardService,\r\n    public actionLogService: ActionLogService,\r\n    public dialog: MatDialog,\r\n    public dialogRef: MatDialogRef<CardModalComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public initialData: Card,\r\n  ) {\r\n    this.data = initialData;\r\n  }\r\n\r\n  get data(): Card {\r\n    return this._data;\r\n  }\r\n\r\n  set data(value: Card) {\r\n    this._data = value;\r\n    if (this._data) {\r\n      this.actionLogService.loadCardActionLogPaged(this._data.id, 1, 150)\r\n        .subscribe({\r\n          next: (data) => {\r\n            this.actionLogs = data;\r\n          },\r\n          error: (error) => {\r\n            console.log(error);\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  editCard() {\r\n    const dialogRef = this.dialog.open(CardEditModalComponent, {\r\n      data: Object.assign({}, this.data)\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.cardService.updateCard(result).subscribe({\r\n          next: () => {\r\n            this.data = result;\r\n            this.cardListService.loadCardListsPaged(this.data.boardId, 1, 50);\r\n          },\r\n          error: (error) => {\r\n            console.log(error);\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  onListChange(event: MatSelectChange) {\r\n    this.cardService.updateCard(this.data).subscribe({\r\n      next: () => {\r\n        this.cardListService.loadCardListsPaged(this.data.boardId, 1, 50);\r\n      },\r\n      error: (error) => {\r\n        console.log(error);\r\n      }\r\n    })\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "styleUrl": "./card-modal.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionLogService",
                        "type": "ActionLogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "initialData",
                        "type": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "cardListService",
                        "type": "CardListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionLogService",
                        "type": "ActionLogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CardModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initialData",
                        "type": "Card",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Card",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Card",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "Card",
                        "line": 43
                    }
                }
            },
            "templateData": "<div class=\"modal\">\r\n\r\n    <div class=\"modal__header\">\r\n        <div>Card</div>\r\n        <mat-icon (click)=\"onNoClick()\">close</mat-icon>\r\n    </div>\r\n\r\n    <div class=\"modal__body\">\r\n\r\n        <div class=\"card-modal\">\r\n\r\n            <div class=\"card-modal__body__header\">\r\n                <div class=\"card-modal__body__header__name\">\r\n                    {{ data.name }}\r\n                </div>\r\n                <div class=\"card-modal__body__header__edit\" (click)=\"editCard()\">\r\n                    <mat-icon>edit</mat-icon>\r\n                    Edit card\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"body-data\">\r\n\r\n                <div class=\"body-data__labels\">\r\n\r\n                    <div class=\"body-data__label\">\r\n                        <mat-icon>list</mat-icon>\r\n                        List\r\n                    </div>\r\n\r\n                    <div class=\"body-data__label\">\r\n                        <mat-icon>calendar_today</mat-icon>\r\n                        Due date\r\n                    </div>\r\n\r\n                    <div class=\"body-data__label\">\r\n                        <mat-icon>sell</mat-icon>\r\n                        Priority\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"body-data__values\">\r\n\r\n                    <mat-form-field class=\"body-data__card-list\">\r\n                        <mat-select [(ngModel)]=\"data.listId\" (selectionChange)=\"onListChange($event)\">\r\n                            <mat-option *ngFor=\"let list of cardListService.cardLists$ | async\" [value]=\"list.id\">\r\n                                {{ list.name }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <div class=\"body-data__due-date\">\r\n                        {{ data.dueDate.toString() | date: 'MMM d, yyyy' }}\r\n                    </div>\r\n\r\n                    <div class=\"body-data__priority\">\r\n                        {{ data.priority | priority }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <h2>Description</h2>\r\n\r\n            <div class=\"body__description\">\r\n                {{data.description}}\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card-modal__action-history\">\r\n            <div class=\"card-modal__action-history__header\">Action logs</div>\r\n            <app-action-history [actionLogs]=\"actionLogs\" />\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Board>",
                "defaultValue": "createEntityAdapter<Board>()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideHttpClient(),\r\n    provideAnimationsAsync(),\r\n    provideNativeDateAdapter(),\r\n    provideStore({ boardState: boardReducer }),\r\n    provideEffects([BoardEffects]),\r\n    provideStoreDevtools({ maxAge: 25, logOnly: false })\r\n  ]\r\n}"
            },
            {
                "name": "boardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(BoardActions.loadBoards, state => ({ ...state, loading: true })),\r\n    on(BoardActions.loadBoardsSuccess, (state, { boards }) => adapter.setAll(boards, { ...state, loading: false })),\r\n    on(BoardActions.loadBoardsFailure, state => ({ ...state, loading: false })),\r\n\r\n    on(BoardActions.createBoardSuccess, (state, { board }) => adapter.addOne(board, state)),\r\n    on(BoardActions.updateBoardSuccess, (state, { board }) => adapter.updateOne({ id: board.id, changes: board }, state)),\r\n    on(BoardActions.deleteBoardSuccess, (state, { boardId }) => adapter.removeOne(boardId, state)),\r\n\r\n    on(BoardActions.selectBoard, (state, { boardId }) => ({ ...state, selectedBoardId: boardId }))\r\n)"
            },
            {
                "name": "createBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Create Board', props<{ board: Board }>())"
            },
            {
                "name": "createBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Create Board Failure', props<{ error: any }>())"
            },
            {
                "name": "createBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Create Board Success', props<{ board: Board }>())"
            },
            {
                "name": "deleteBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Delete Board', props<{ boardId: string }>())"
            },
            {
                "name": "deleteBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Delete Board Failure', props<{ error: any }>())"
            },
            {
                "name": "deleteBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Delete Board Success', props<{ boardId: string }>())"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    baseUrl: \"http://localhost:8000\"\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BoardState",
                "defaultValue": "adapter.getInitialState({\r\n    selectedBoardId: null,\r\n    loading: false,\r\n})"
            },
            {
                "name": "loadBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Load Boards')"
            },
            {
                "name": "loadBoardsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Load Boards Failure', props<{ error: any }>())"
            },
            {
                "name": "loadBoardsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Load Boards Success', props<{ boards: Board[] }>())"
            },
            {
                "name": "selectAllBoards",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, selectAll)"
            },
            {
                "name": "selectBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Select Board', props<{ boardId: string }>())"
            },
            {
                "name": "selectBoardEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, selectEntities)"
            },
            {
                "name": "selectBoardIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, selectIds)"
            },
            {
                "name": "selectBoardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<BoardState>('boardState')"
            },
            {
                "name": "selectBoardTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, selectTotal)"
            },
            {
                "name": "selectLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, state => state.loading)"
            },
            {
                "name": "selectSelectedBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectBoardEntities,\r\n    selectSelectedBoardId,\r\n    (entities, selectedId) => selectedId ? entities[selectedId] : null\r\n)"
            },
            {
                "name": "selectSelectedBoardId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectBoardState, state => state.selectedBoardId)"
            },
            {
                "name": "updateBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Update Board', props<{ board: Board }>())"
            },
            {
                "name": "updateBoardFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Update Board Failure', props<{ error: any }>())"
            },
            {
                "name": "updateBoardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Board List] Update Board Success', props<{ board: Board }>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/board/board.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ActionType",
                "childs": [
                    {
                        "name": "Added",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Modified",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Deleted",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/data/enums/actionType.ts"
            },
            {
                "name": "ApiPaths",
                "childs": [
                    {
                        "name": "actionLogBoard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "actionLogs/board"
                    },
                    {
                        "name": "actionLogCard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "actionLogs/card"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/action-log.service.ts"
            },
            {
                "name": "ApiPaths",
                "childs": [
                    {
                        "name": "boards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boards"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/board.service.ts"
            },
            {
                "name": "ApiPaths",
                "childs": [
                    {
                        "name": "cardLists",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cardLists"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/card-list.service.ts"
            },
            {
                "name": "ApiPaths",
                "childs": [
                    {
                        "name": "cards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cards"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/card.service.ts"
            },
            {
                "name": "Priority",
                "childs": [
                    {
                        "name": "Low",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "High",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/data/enums/priority.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/board/board.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Board>",
                    "defaultValue": "createEntityAdapter<Board>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardState",
                    "defaultValue": "adapter.getInitialState({\r\n    selectedBoardId: null,\r\n    loading: false,\r\n})"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideHttpClient(),\r\n    provideAnimationsAsync(),\r\n    provideNativeDateAdapter(),\r\n    provideStore({ boardState: boardReducer }),\r\n    provideEffects([BoardEffects]),\r\n    provideStoreDevtools({ maxAge: 25, logOnly: false })\r\n  ]\r\n}"
                }
            ],
            "src/app/store/board/board.reducer.ts": [
                {
                    "name": "boardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(BoardActions.loadBoards, state => ({ ...state, loading: true })),\r\n    on(BoardActions.loadBoardsSuccess, (state, { boards }) => adapter.setAll(boards, { ...state, loading: false })),\r\n    on(BoardActions.loadBoardsFailure, state => ({ ...state, loading: false })),\r\n\r\n    on(BoardActions.createBoardSuccess, (state, { board }) => adapter.addOne(board, state)),\r\n    on(BoardActions.updateBoardSuccess, (state, { board }) => adapter.updateOne({ id: board.id, changes: board }, state)),\r\n    on(BoardActions.deleteBoardSuccess, (state, { boardId }) => adapter.removeOne(boardId, state)),\r\n\r\n    on(BoardActions.selectBoard, (state, { boardId }) => ({ ...state, selectedBoardId: boardId }))\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/store/board/board.actions.ts": [
                {
                    "name": "createBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Create Board', props<{ board: Board }>())"
                },
                {
                    "name": "createBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Create Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "createBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Create Board Success', props<{ board: Board }>())"
                },
                {
                    "name": "deleteBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Delete Board', props<{ boardId: string }>())"
                },
                {
                    "name": "deleteBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Delete Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "deleteBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Delete Board Success', props<{ boardId: string }>())"
                },
                {
                    "name": "loadBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Load Boards')"
                },
                {
                    "name": "loadBoardsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Load Boards Failure', props<{ error: any }>())"
                },
                {
                    "name": "loadBoardsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Load Boards Success', props<{ boards: Board[] }>())"
                },
                {
                    "name": "selectBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Select Board', props<{ boardId: string }>())"
                },
                {
                    "name": "updateBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Update Board', props<{ board: Board }>())"
                },
                {
                    "name": "updateBoardFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Update Board Failure', props<{ error: any }>())"
                },
                {
                    "name": "updateBoardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Board List] Update Board Success', props<{ board: Board }>())"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    baseUrl: \"http://localhost:8000\"\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                }
            ],
            "src/app/store/board/board.selectors.ts": [
                {
                    "name": "selectAllBoards",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, selectAll)"
                },
                {
                    "name": "selectBoardEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, selectEntities)"
                },
                {
                    "name": "selectBoardIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, selectIds)"
                },
                {
                    "name": "selectBoardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BoardState>('boardState')"
                },
                {
                    "name": "selectBoardTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, selectTotal)"
                },
                {
                    "name": "selectLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, state => state.loading)"
                },
                {
                    "name": "selectSelectedBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectBoardEntities,\r\n    selectSelectedBoardId,\r\n    (entities, selectedId) => selectedId ? entities[selectedId] : null\r\n)"
                },
                {
                    "name": "selectSelectedBoardId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectBoardState, state => state.selectedBoardId)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/board/board.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/data/enums/actionType.ts": [
                {
                    "name": "ActionType",
                    "childs": [
                        {
                            "name": "Added",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Modified",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Deleted",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/data/enums/actionType.ts"
                }
            ],
            "src/app/services/action-log.service.ts": [
                {
                    "name": "ApiPaths",
                    "childs": [
                        {
                            "name": "actionLogBoard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "actionLogs/board"
                        },
                        {
                            "name": "actionLogCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "actionLogs/card"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/action-log.service.ts"
                }
            ],
            "src/app/services/board.service.ts": [
                {
                    "name": "ApiPaths",
                    "childs": [
                        {
                            "name": "boards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boards"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/board.service.ts"
                }
            ],
            "src/app/services/card-list.service.ts": [
                {
                    "name": "ApiPaths",
                    "childs": [
                        {
                            "name": "cardLists",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cardLists"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/card-list.service.ts"
                }
            ],
            "src/app/services/card.service.ts": [
                {
                    "name": "ApiPaths",
                    "childs": [
                        {
                            "name": "cards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cards"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/card.service.ts"
                }
            ],
            "src/app/data/enums/priority.ts": [
                {
                    "name": "Priority",
                    "childs": [
                        {
                            "name": "Low",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "High",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/data/enums/priority.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/action-history/action-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board-action-history/board-action-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardActionHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board-edit-modal/board-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board-list-item/board-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board-list/board-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-edit-modal/card-edit-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardEditModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-list/card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-modal/card-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/data/models/action-log.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionLog",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data/models/board.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Board",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data/models/card-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/models/card.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/data/models/property-log.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PropertyLog",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/priority.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PriorityPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/action-log.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActionLogService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/card-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardListService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBoardsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBoardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllBoards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectBoardTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedBoardId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/board/board.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-services/mockActionLogService.ts",
                "type": "class",
                "linktype": "classe",
                "name": "mockActionLogService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-services/mockBoardService.ts",
                "type": "class",
                "linktype": "classe",
                "name": "mockBoardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-services/mockCardListService.ts",
                "type": "class",
                "linktype": "classe",
                "name": "mockCardListService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-services/mockCardService.ts",
                "type": "class",
                "linktype": "classe",
                "name": "mockCardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}